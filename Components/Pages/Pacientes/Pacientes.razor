@page "/pacientes"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject DatabaseService Db

<PageTitle>Pacientes</PageTitle>

<div class="top-row px-4 d-flex justify-content-between align-items-center">
    <h4 class="m-0">Lista de Pacientes</h4>
    <button class="btn btn-success" @onclick="@(() => Navigation.NavigateTo("/agregar/paciente/"))">Agregar</button>
</div>

<Tabla TClase="Paciente" Elementos="_pacientes" TablaSQL="pacientes" OnCargar="Cargar" OnEliminar="Eliminar">
    <Encabezados>
        <th>Nombre Completo</th>
        <th>Fecha de Nacimiento</th>
        <th>Correo Electrónico</th>
        <th>Teléfono</th>
        <th>Fecha de Registro</th>
    </Encabezados>
    <Datos Context="context">
        <td>@context.NombreCompleto</td>
        <td>@(context.FechaNacimiento == DateTime.MinValue ? "" : context.FechaNacimiento.ToString("yyyy-MM-dd"))</td>
        <td>@context.CorreoElectronico</td>
        <td>@context.Telefono</td>
        <td>@(context.FechaRegistro == DateTime.MinValue ? "" : context.FechaRegistro.ToString("yyyy-MM-dd HH:mm:ss"))</td>
    </Datos>
    <Acciones Context="context">
        @if (!string.IsNullOrEmpty(context.IdPaciente))
        {
            <button class="btn btn-sm btn-warning" @onclick="@(() => Navigation.NavigateTo($"/editar/paciente/{context.IdPaciente}"))">Modificar</button>
        }
    </Acciones>
</Tabla>

@code {
    private List<Paciente> _pacientes = new();

    private async Task<List<Paciente>> Cargar(int Pagina)
    {
        try
        {
            var sql = "SELECT id_paciente, nombre_completo, fecha_nacimiento, correo_electronico, telefono, fecha_registro " +
                      "FROM Pacientes ORDER BY fecha_registro DESC LIMIT @limite OFFSET @offset";

            var dicts = await Db.QueryAsync(sql, new Dictionary<string, object>
                {
                    ["@limite"] = 8,
                    ["@offset"] = (Pagina - 1) * 8
                });

            var pacientes = dicts.Select(d => new Paciente
                {
                    IdPaciente = d["id_paciente"]?.ToString() ?? "",
                    NombreCompleto = d["nombre_completo"]?.ToString() ?? "",
                    FechaNacimiento = DateTime.TryParse(d["fecha_nacimiento"]?.ToString(), out var fn) ? fn : DateTime.MinValue,
                    CorreoElectronico = d["correo_electronico"]?.ToString(),
                    Telefono = d["telefono"]?.ToString(),
                    FechaRegistro = DateTime.TryParse(d["fecha_registro"]?.ToString(), out var fr) ? fr : DateTime.Now
                }).ToList();

            return pacientes;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error al cargar pacientes: {ex.Message}");
            return new List<Paciente>();
        }
    }

    private async Task Eliminar(string id)
    {
        var sql = "DELETE FROM Pacientes WHERE id_paciente = @id";
        await Db.ExecuteAsync(sql, new Dictionary<string, object> { ["@id"] = id });
    }
}