@page "/citas"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject DatabaseService Db

<PageTitle>Citas</PageTitle>

<div class="top-row px-4 d-flex justify-content-between align-items-center">
    <h4 class="m-0">Citas</h4>
    <button class="btn btn-success" @onclick="@(() => Navigation.NavigateTo($"/agregar/cita/"))">Agregar</button>
</div>

<Tabla TClase="Cita" Elementos="_citas" TablaSQL="citas" OnCargar="Cargar" OnEliminar="Eliminar">
    <Encabezados>
        <th>Paciente</th>
        <th>Médico</th>
        <th>Fecha</th>
        <th>Hora</th>
        <th>Estado</th>
    </Encabezados>
    <Datos Context="context">
        <td>@context.Paciente</td>
        <td>@context.Medico</td>
        <td>@context.Fecha.ToString("dd/MM/yyyy")</td>
        <td>@context.Hora</td>
        <td>@context.Estado</td>
    </Datos>
    <Acciones Context="context">
        @if (!string.IsNullOrEmpty(context.IdCita))
        {
            <button class="btn btn-sm btn-warning" @onclick="@(() => Navigation.NavigateTo($"/editar/cita/{context.IdCita}"))">Modificar</button>
        }
    </Acciones>
</Tabla>

@code {
    private List<Cita> _citas = new();

    private async Task<List<Cita>> Cargar(int Pagina)
    {
        try
        {
            var sql = @"
            SELECT
                c.id_cita,
                c.id_paciente,
                p.nombre_completo AS nombre_paciente,
                c.id_medico,
                m.nombre_completo AS nombre_medico,
                c.fecha,
                c.hora,
                c.estado
            FROM Citas c
            JOIN Pacientes p ON c.id_paciente = p.id_paciente
            JOIN Medicos m ON c.id_medico = m.id_medico
            ORDER BY c.fecha DESC
            LIMIT @limite OFFSET @offset";

            var dicts = await Db.QueryAsync(sql, new Dictionary<string, object>
                {
                    ["@limite"] = 8,
                    ["@offset"] = (Pagina - 1) * 8
                });

            var citas = dicts.Select(d => new Cita
                {
                    IdCita = d["id_cita"]?.ToString() ?? "",
                    IdPaciente = d["id_paciente"]?.ToString() ?? "",
                    IdMedico = d["id_medico"]?.ToString() ?? "",
                    Paciente = d["nombre_paciente"]?.ToString() ?? "",
                    Medico = d["nombre_medico"]?.ToString() ?? "",
                    Fecha = DateTime.TryParse(d["fecha"]?.ToString(), out var f) ? f : DateTime.MinValue,
                    Hora = TimeSpan.TryParse(d["hora"]?.ToString(), out var hi) ? hi : TimeSpan.Zero,
                    Estado = d["estado"]?.ToString() ?? "pendiente"
                }).ToList();

            return citas;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error al cargar pacientes: {ex.Message}");
            return new List<Cita>();
        }
    }

    private async Task Eliminar(string id)
    {
        var sql = "DELETE FROM Citas WHERE id_cita = @id";
        await Db.ExecuteAsync(sql, new Dictionary<string, object> { ["@id"] = id });
    }
}