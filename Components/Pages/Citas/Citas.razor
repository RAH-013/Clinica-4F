@page "/citas"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject DatabaseService Db

<div class="top-row px-4 d-flex justify-content-between align-items-center">
    <h4 class="m-0">Citas</h4>
    <button class="btn btn-success" @onclick="@(() => Navigation.NavigateTo($"/agregar/cita/"))">Agregar</button>
</div>

@if (_citas.Count > 0)
{
    <article class="m-4 flex-grow-1">
        <table class="table table-striped table-bordered table-hover m-0">
            <thead class="table-dark">
                <tr>
                    <th>Paciente</th>
                    <th>Médico</th>
                    <th>Fecha</th>
                    <th>Hora</th>
                    <th>Estado</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var c in _citas)
                {
                    <tr>
                        <td>@c.Paciente</td>
                        <td>@c.Medico</td>
                        <td>@c.Fecha.ToString("dd/MM/yyyy")</td>
                        <td>@c.Hora</td>
                        <td>@c.Estado</td>
                        <td class="d-flex align-items-center justify-content-center gap-2">
                            @if (_confirmandoEliminacionId == c.IdCita)
                            {
                                <button class="btn btn-sm btn-secondary" @onclick="CancelarEliminacion">Cancelar</button>
                                <button class="btn btn-sm btn-danger" @onclick="@(() => ConfirmarEliminar(c.IdCita))">Confirmar</button>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-warning" @onclick="@(() => Navigation.NavigateTo($"/editar/cita/{c.IdCita}"))">Editar</button>
                                <button class="btn btn-sm btn-danger" @onclick="@(() => PrepararEliminacion(c.IdCita))">Eliminar</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (MaxPaginas > 1)
        {
            <nav class="d-flex justify-content-center align-items-center gap-3 mt-3">
                <button class="btn btn-primary" disabled="@(Pagina <= 1)" @onclick="() => CambiarPagina(Pagina - 1)">Anterior</button>
                <span>Página @Pagina de @MaxPaginas</span>
                <button class="btn btn-primary" disabled="@(Pagina >= MaxPaginas)" @onclick="() => CambiarPagina(Pagina + 1)">Siguiente</button>
            </nav>
        }
    </article>
}
else
{
    <div class="d-flex align-items-center justify-content-center h-75 mt-5">
        <h4>Sin registros de citas.</h4>
    </div>
}

@code {
    private List<Cita> _citas = new();
    private string? _confirmandoEliminacionId = null;

    private int Pagina = 1;
    private int TotalRegistros = 0;
    private int MaxPaginas => (int)Math.Ceiling(TotalRegistros / 8.0);

    protected override async Task OnInitializedAsync()
    {
        await CargarTotal();
        await Cargar();
    }

    private async Task CargarTotal()
    {
        var result = await Db.QueryAsync("SELECT COUNT(*) as total FROM Citas");
        if (result.Count > 0 && int.TryParse(result[0]["total"]?.ToString(), out var total))
        {
            TotalRegistros = total;
        }
        else
        {
            TotalRegistros = 0;
        }
    }

    private async Task Cargar()
    {
        if (Pagina < 1) Pagina = 1;
        if (MaxPaginas > 0 && Pagina > MaxPaginas)
            Pagina = MaxPaginas;

        var query = @"
        SELECT
            c.id_cita,
            c.id_paciente,
            p.nombre_completo AS nombre_paciente,
            c.id_medico,
            m.nombre_completo AS nombre_medico,
            c.fecha,
            c.hora,
            c.estado
        FROM Citas c
        JOIN Pacientes p ON c.id_paciente = p.id_paciente
        JOIN Medicos m ON c.id_medico = m.id_medico
        ORDER BY c.fecha DESC
        LIMIT @limite OFFSET @offset";

        var dicts = await Db.QueryAsync(query, new Dictionary<string, object>
            {
                ["@limite"] = 8,
                ["@offset"] = (Pagina - 1) * 8
            });

        _citas = dicts.Select(d => new Cita
            {
                IdCita = d["id_cita"]?.ToString() ?? "",
                IdPaciente = d["id_paciente"]?.ToString() ?? "",
                IdMedico = d["id_medico"]?.ToString() ?? "",
                Paciente = d["nombre_paciente"]?.ToString() ?? "",
                Medico = d["nombre_medico"]?.ToString() ?? "",
                Fecha = DateTime.TryParse(d["fecha"]?.ToString(), out var f) ? f : DateTime.MinValue,
                Hora = TimeSpan.TryParse(d["hora"]?.ToString(), out var hi) ? hi : TimeSpan.Zero,
                Estado = d["estado"]?.ToString() ?? "pendiente"
            }).ToList();
    }

    private async Task CambiarPagina(int nuevaPagina)
    {
        if (nuevaPagina < 1) nuevaPagina = 1;
        if (nuevaPagina > MaxPaginas) nuevaPagina = MaxPaginas;
        Pagina = nuevaPagina;
        await Cargar();
    }

    private void PrepararEliminacion(string id)
    {
        _confirmandoEliminacionId = id;
    }

    private void CancelarEliminacion()
    {
        _confirmandoEliminacionId = null;
    }

    private async Task ConfirmarEliminar(string id)
    {
        var sql = "DELETE FROM Citas WHERE id_cita = @id_cita";
        await Db.ExecuteAsync(sql, new Dictionary<string, object> { ["@id_cita"] = id });
        _confirmandoEliminacionId = null;
        await CargarTotal();
        await Cargar();
    }
}
