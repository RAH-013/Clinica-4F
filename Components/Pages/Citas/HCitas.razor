@page "/"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject DatabaseService Db

@using System.Globalization

<div class="top-row px-4 d-flex justify-content-between align-items-center">
    <h4 class="m-0">Citas de hoy</h4>
    <h4 class="m-0">@ObtenerFechaHoyFormateada()</h4>
</div>

@if (_citas.Count > 0)
{
    <article class="m-4 flex-grow-1">
        <table class="table table-striped table-bordered table-hover m-0">
            <thead class="table-dark">
                <tr>
                    <th>Paciente</th>
                    <th>Médico</th>
                    <th>Fecha</th>
                    <th>Hora</th>
                    <th>Estado</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var c in _citas)
                {
                    <tr>
                        <td>@c.Paciente</td>
                        <td>@c.Medico</td>
                        <td>@c.FechaCita.ToString("dd/MM/yyyy")</td>
                        <td>@c.HoraInicio</td>
                        <td>@c.Estado</td>
                    </tr>
                }
            </tbody>
        </table>

        @if (MaxPaginas > 1)
        {
            <nav class="d-flex justify-content-center align-items-center gap-3 mt-3">
                <button class="btn btn-primary" disabled="@(Pagina <= 1)" @onclick="() => CambiarPagina(Pagina - 1)">Anterior</button>
                <span>Página @Pagina de @MaxPaginas</span>
                <button class="btn btn-primary" disabled="@(Pagina >= MaxPaginas)" @onclick="() => CambiarPagina(Pagina + 1)">Siguiente</button>
            </nav>
        }
    </article>
}
else
{
    <div class="d-flex align-items-center justify-content-center h-75 mt-5">
        <h4>Sin citas para hoy.</h4>
    </div>
}

@code {
    private int Pagina = 1;
    private int TotalRegistros = 0;
    private int MaxPaginas => (int)Math.Ceiling(TotalRegistros / 8.0);

    private List<Cita> _citas = new();

    protected override async Task OnInitializedAsync()
    {
        await CargarTotalRegistros();
        await Cargar();
    }

    private async Task CargarTotalRegistros()
    {
        var result = await Db.QueryAsync("SELECT COUNT(*) as total FROM Citas WHERE fecha_cita = CURDATE()");
        if (result.Count > 0 && int.TryParse(result[0]["total"]?.ToString(), out var total))
        {
            TotalRegistros = total;
        }
        else
        {
            TotalRegistros = 0;
        }
    }

    private async Task Cargar()
    {
        if (Pagina < 1) Pagina = 1;
        if (MaxPaginas > 0 && Pagina > MaxPaginas) Pagina = MaxPaginas;

        var query = @"
            SELECT
                c.id_cita,
                c.id_paciente,
                p.nombre_completo AS nombre_paciente,
                c.id_medico,
                m.nombre_completo AS nombre_medico,
                c.fecha_cita,
                c.hora_inicio,
                c.estado
            FROM Citas c
            JOIN Pacientes p ON c.id_paciente = p.id_paciente
            JOIN Medicos m ON c.id_medico = m.id_medico
            WHERE c.fecha_cita = CURDATE()
            ORDER BY c.hora_inicio
            LIMIT @limite OFFSET @offset";

        var dicts = await Db.QueryAsync(query, new Dictionary<string, object>
            {
                ["@limite"] = 8,
                ["@offset"] = (Pagina - 1) * 8
            });

        _citas = dicts.Select(d => new Cita
            {
                IdCita = d["id_cita"]?.ToString() ?? string.Empty,
                IdPaciente = d["id_paciente"]?.ToString() ?? string.Empty,
                IdMedico = d["id_medico"]?.ToString() ?? string.Empty,
                Paciente = d["nombre_paciente"]?.ToString() ?? string.Empty,
                Medico = d["nombre_medico"]?.ToString() ?? string.Empty,
                FechaCita = DateTime.TryParse(d["fecha_cita"]?.ToString(), out var fn) ? fn : DateTime.MinValue,
                HoraInicio = TimeSpan.TryParse(d["hora_inicio"]?.ToString(), out var hi) ? hi : TimeSpan.Zero,
                Estado = d["estado"]?.ToString() ?? "pendiente"
            }).ToList();
    }

    private async Task CambiarPagina(int nuevaPagina)
    {
        if (nuevaPagina < 1) nuevaPagina = 1;
        if (nuevaPagina > MaxPaginas) nuevaPagina = MaxPaginas;
        Pagina = nuevaPagina;
        await Cargar();
    }

    private string ObtenerFechaHoyFormateada()
    {
        var fecha = DateTime.Today;
        return FormatearFechaConCapitalizacion(fecha);
    }

    private static string FormatearFechaConCapitalizacion(DateTime fecha)
    {
        var cultura = new CultureInfo("es-MX");
        string fechaFormateada = fecha.ToString("dddd, dd 'de' MMMM 'del' yyyy", cultura);

        TextInfo textInfo = cultura.TextInfo;
        fechaFormateada = textInfo.ToTitleCase(fechaFormateada);

        return fechaFormateada
            .Replace(" De ", " de ")
            .Replace(" Del ", " del ");
    }
}