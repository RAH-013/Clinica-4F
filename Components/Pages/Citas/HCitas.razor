@page "/"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject DatabaseService Db

<PageTitle>Citas de hoy</PageTitle>

<div class="top-row px-4 d-flex justify-content-between align-items-center">
    <h4 class="m-0">Citas de hoy</h4>
    <h4 class="m-0">@ObtenerFechaHoyFormateada()</h4>
</div>

<Tabla TClase="Cita" Elementos="_citas" TablaSQL="citas" OnCargar="Cargar">
    <Encabezados>
        <th>Paciente</th>
        <th>Médico</th>
        <th>Fecha</th>
        <th>Hora</th>
        <th>Estado</th>
    </Encabezados>
    <Datos Context="context">
        <td>@context.Paciente</td>
        <td>@context.Medico</td>
        <td>@context.Fecha.ToString("dd/MM/yyyy")</td>
        <td>@context.Hora</td>
        <td>@context.Estado</td>
    </Datos>
</Tabla>

@code {
    private List<Cita> _citas = new();

    private async Task<List<Cita>> Cargar(int Pagina)
    {
        try
        {
            var sql = @"
            SELECT
                c.id_cita,
                c.id_paciente,
                p.nombre_completo AS nombre_paciente,
                c.id_medico,
                m.nombre_completo AS nombre_medico,
                c.fecha,
                c.hora,
                c.estado
            FROM Citas c
            JOIN Pacientes p ON c.id_paciente = p.id_paciente
            JOIN Medicos m ON c.id_medico = m.id_medico
            WHERE c.fecha = CURDATE()
            ORDER BY c.fecha DESC
            LIMIT @limite OFFSET @offset";

            var dicts = await Db.QueryAsync(sql, new Dictionary<string, object>
                {
                    ["@limite"] = 8,
                    ["@offset"] = (Pagina - 1) * 8
                });

            var citas = dicts.Select(d => new Cita
                {
                    IdCita = d["id_cita"]?.ToString() ?? "",
                    IdPaciente = d["id_paciente"]?.ToString() ?? "",
                    IdMedico = d["id_medico"]?.ToString() ?? "",
                    Paciente = d["nombre_paciente"]?.ToString() ?? "",
                    Medico = d["nombre_medico"]?.ToString() ?? "",
                    Fecha = DateTime.TryParse(d["fecha"]?.ToString(), out var f) ? f : DateTime.MinValue,
                    Hora = TimeSpan.TryParse(d["hora"]?.ToString(), out var hi) ? hi : TimeSpan.Zero,
                    Estado = d["estado"]?.ToString() ?? "pendiente"
                }).ToList();

            return citas;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error al cargar pacientes: {ex.Message}");
            return new List<Cita>();
        }
    }

    private string ObtenerFechaHoyFormateada()
    {
        var fecha = DateTime.Today;
        return FormatearFechaConCapitalizacion(fecha);
    }

    private static string FormatearFechaConCapitalizacion(DateTime fecha)
    {
        var cultura = new CultureInfo("es-MX");
        string fechaFormateada = fecha.ToString("dddd, dd 'de' MMMM 'del' yyyy", cultura);

        TextInfo textInfo = cultura.TextInfo;
        fechaFormateada = textInfo.ToTitleCase(fechaFormateada);

        return fechaFormateada
            .Replace(" De ", " de ")
            .Replace(" Del ", " del ");
    }
}