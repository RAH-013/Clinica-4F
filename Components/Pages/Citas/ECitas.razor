@page "/editar/cita/{id:guid}"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject DatabaseService Db

<div class="top-row px-4">
    <h4 class="m-0">Editar Cita</h4>
</div>

@if (_cita is not null)
{
    <article class="m-4">
        <FCitas Cita="_cita"
        Pacientes="_pacientes"
        Medicos="_medicos"
        OnSubmit="GuardarEdicion" />
    </article>
}
else
{
    <p>Cargando cita...</p>
}

@code {
    [Parameter]
    public Guid id { get; set; }

    private List<Paciente> _pacientes = new();
    private List<Medico> _medicos = new();
    private Cita? _cita;

    protected override async Task OnInitializedAsync()
    {
        _pacientes = (await Db.QueryAsync("SELECT id_paciente, nombre_completo FROM Pacientes"))
            .Select(p => new Paciente
                {
                    IdPaciente = p["id_paciente"]?.ToString() ?? "",
                    NombreCompleto = p["nombre_completo"]?.ToString() ?? ""
                }).ToList();

        _medicos = (await Db.QueryAsync("SELECT id_medico, nombre_completo FROM Medicos"))
            .Select(m => new Medico
                {
                    IdMedico = m["id_medico"]?.ToString() ?? "",
                    NombreCompleto = m["nombre_completo"]?.ToString() ?? ""
                }).ToList();
    }

    protected override async Task OnParametersSetAsync()
    {
        await Cargar(id);
    }

    private async Task Cargar(Guid citaId)
    {
        const string sql = @"
            SELECT id_cita, id_paciente, id_medico, fecha, hora, estado
            FROM Citas
            WHERE id_cita = @id";

        var parametros = new Dictionary<string, object>
            {
                ["@id"] = citaId.ToString()
            };

        var result = await Db.QueryAsync(sql, parametros);

        if (result.Count == 0)
        {
            Navigation.NavigateTo("/citas");
            return;
        }

        var d = result[0];
        _cita = new Cita
            {
                IdCita = d["id_cita"]?.ToString() ?? "",
                IdPaciente = d["id_paciente"]?.ToString() ?? "",
                IdMedico = d["id_medico"]?.ToString() ?? "",
                Fecha = DateTime.TryParse(d["fecha"]?.ToString(), out var f) ? f : DateTime.Today,
                Hora = TimeSpan.TryParse(d["hora"]?.ToString(), out var hi) ? hi : TimeSpan.Zero,
                Estado = d["estado"]?.ToString() ?? "pendiente"
            };
    }

    private async Task GuardarEdicion()
    {
        if (_cita is null) return;

        const string sql = @"
            UPDATE Citas SET
                id_paciente = @id_paciente,
                id_medico = @id_medico,
                fecha = @fecha,
                hora = @hora,
                estado = @estado
            WHERE id_cita = @id_cita";

        var parametros = new Dictionary<string, object>
            {
                ["@id_cita"] = _cita.IdCita,
                ["@id_paciente"] = _cita.IdPaciente,
                ["@id_medico"] = _cita.IdMedico,
                ["@fecha"] = _cita.Fecha,
                ["@hora"] = _cita.Hora,
                ["@estado"] = _cita.Estado
            };

        await Db.ExecuteAsync(sql, parametros);
        Navigation.NavigateTo("/citas");
    }
}