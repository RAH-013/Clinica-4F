@page "/editar/cita/{id:guid}"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject DatabaseService Db

<div class="top-row px-4">
    <h4 class="m-0">Editar Cita</h4>
</div>

@if (_cita is not null)
{
    <article class="m-4">
        <EditForm class="mb-5" Model="_cita" FormName="frmCita" OnValidSubmit="GuardarEdicion" autocomplete="off">
            <DataAnnotationsValidator />

            <div class="input-group mb-3">
                <label class="input-group-text">Paciente</label>
                <InputSelect TValue="string" @bind-Value="_cita.IdPaciente" class="form-control">
                    @foreach (var paciente in _pacientes)
                    {
                        <option value="@paciente.IdPaciente">@paciente.NombreCompleto</option>
                    }
                </InputSelect>
            </div>
            <ValidationMessage For="@(() => _cita.IdPaciente)" />
            <br />

            <div class="input-group mb-3">
                <label class="input-group-text">Médico</label>
                <InputSelect TValue="string" @bind-Value="_cita.IdMedico" class="form-control">
                    @foreach (var medico in _medicos)
                    {
                        <option value="@medico.IdMedico">@medico.NombreCompleto</option>
                    }
                </InputSelect>
            </div>
            <ValidationMessage For="@(() => _cita.IdMedico)" />
            <br />

            <div class="input-group mb-3">
                <label class="input-group-text">Fecha</label>
                <InputDate TValue="DateTime" @bind-Value="_cita.FechaCita" class="form-control" />
            </div>
            <ValidationMessage For="@(() => _cita.FechaCita)" />
            <br />

            <div class="input-group mb-3">
                <label class="input-group-text">Hora</label>
                <InputText type="time" @bind-Value="_horaInicioString" class="form-control" />
            </div>
            <br />

            <div class="input-group mb-3">
                <label class="input-group-text">Estado</label>
                <InputSelect TValue="string" @bind-Value="_cita.Estado" class="form-control">
                    <option value="pendiente">Pendiente</option>
                    <option value="confirmada">Confirmada</option>
                    <option value="cancelada">Cancelada</option>
                    <option value="completada">Completada</option>
                </InputSelect>
            </div>
            <br />

            <button type="button" class="btn btn-secondary" @onclick="@(() => Navigation.NavigateTo("/citas"))">Cancelar</button>
            <button type="submit" class="btn btn-success me-2">Guardar</button>
        </EditForm>
    </article>
}
else
{
    <p>Cargando cita...</p>
}

@code {
    [Parameter]
    public Guid id { get; set; }

    private List<Paciente> _pacientes = new();
    private List<Medico> _medicos = new();
    private Cita? _cita;

    private string _horaInicioString
    {
        get => _cita?.HoraInicio.ToString(@"hh\:mm") ?? "00:00";
        set
        {
            if (TimeSpan.TryParse(value, out var ts) && _cita is not null)
            {
                _cita.HoraInicio = ts;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _pacientes = (await Db.QueryAsync("SELECT id_paciente, nombre_completo FROM Pacientes"))
            .Select(p => new Paciente
                {
                    IdPaciente = p["id_paciente"]?.ToString() ?? "",
                    NombreCompleto = p["nombre_completo"]?.ToString() ?? ""
                }).ToList();

        _medicos = (await Db.QueryAsync("SELECT id_medico, nombre_completo FROM Medicos"))
            .Select(m => new Medico
                {
                    IdMedico = m["id_medico"]?.ToString() ?? "",
                    NombreCompleto = m["nombre_completo"]?.ToString() ?? ""
                }).ToList();
    }

    protected override async Task OnParametersSetAsync()
    {
        await Cargar(id);
    }

    private async Task Cargar(Guid citaId)
    {
        const string sql = @"
            SELECT id_cita, id_paciente, id_medico, fecha_cita, hora_inicio, estado
            FROM Citas
            WHERE id_cita = @id";

        var parametros = new Dictionary<string, object>
            {
                ["@id"] = citaId.ToString()
            };

        var result = await Db.QueryAsync(sql, parametros);

        if (result.Count == 0)
        {
            Navigation.NavigateTo("/citas");
            return;
        }

        var d = result[0];
        _cita = new Cita
            {
                IdCita = d["id_cita"]?.ToString() ?? "",
                IdPaciente = d["id_paciente"]?.ToString() ?? "",
                IdMedico = d["id_medico"]?.ToString() ?? "",
                FechaCita = DateTime.TryParse(d["fecha_cita"]?.ToString(), out var f) ? f : DateTime.Today,
                HoraInicio = TimeSpan.TryParse(d["hora_inicio"]?.ToString(), out var hi) ? hi : TimeSpan.Zero,
                Estado = d["estado"]?.ToString() ?? "pendiente"
            };
    }

    private async Task GuardarEdicion()
    {
        if (_cita is null) return;

        const string sql = @"
            UPDATE Citas SET
                id_paciente = @id_paciente,
                id_medico = @id_medico,
                fecha_cita = @fecha_cita,
                hora_inicio = @hora_inicio,
                estado = @estado
            WHERE id_cita = @id_cita";

        var parametros = new Dictionary<string, object>
            {
                ["@id_cita"] = _cita.IdCita,
                ["@id_paciente"] = _cita.IdPaciente,
                ["@id_medico"] = _cita.IdMedico,
                ["@fecha_cita"] = _cita.FechaCita,
                ["@hora_inicio"] = _cita.HoraInicio,
                ["@estado"] = _cita.Estado
            };

        await Db.ExecuteAsync(sql, parametros);
        Navigation.NavigateTo("/citas");
    }
}